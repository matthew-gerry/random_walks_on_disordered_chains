% stats_p_dga.m

% Carry out full counting statistics for random walks on disordered chains
% with varying proportion of A sites and varying inhomogeneity. Import data
% generated by the function data_p_dga.m which calculates probability
% distributions as a function of time for a range of these parameter
% values. The data files taken in might be quite large (~100s of MB),
% making this function take a little bit of time.

% The outputs are four 4-index arrays, containing the values of each of the
% four cumulants varying with p, dga, random seed, with time varying along
% the last index, e.g. C2(p, dga, seed, time).

% The argument, filename, is the name of the .mat file in the parent
% directory containing the data.

% Matthew Gerry, May 2024


function [C1, C2, C3, C4] = stats_p_dga(filename)

    load(strcat("../", filename, ".mat"))

    % Re-define some of the parameter-dependent variables
    time = 0:dt:tmax; % Time
    site_list = -floor(numsites/2):floor(numsites/2); % List of site indices
    p_list = 0:dp:1; % List of p values
    dga_list = 0:ddga:2*ga_av; % List of dga values

    % Calculate time derivative of the probability distribution at each time step
    dpdt = zeros(length(dga_list), length(p_list), set_size, numsites, length(time));
    
    for ii=1:length(dga_list)
        % Recreate gamma values for A and B sites based on dga and ga_av
        dga = dga_list(ii);
        ga_a = ga_av + 0.5*dga; ga_b = ga_av - 0.5*dga;
        for jj=1:length(p_list)
            for kk=1:set_size
              
                L = L_chain(chains(jj, kk, :), b, ga_a, ga_b, tau); % Rate matrix for the chain
                dpdt(ii, jj, kk, :, :) = L*reshape(dists(ii, jj, kk, :, :),[numsites,length(time)]);
            
            end % kk
        end % jj
    end % ii
    
    % Calculate statistics
    site_tensor = repmat(reshape(site_list,[1,1,1,numsites,1]),[length(dga_list), length(p_list),set_size,1,length(time)]);
    
    % Mean
    n_av = sum(dists.*site_tensor,4);
    C1 = sum(dpdt.*site_tensor,4);
    
    % Diffusion coefficient
%     S = sum(dists.*(site_tensor.^2),4) - n_av.^2; % Integrated variance
    C2 = sum(dpdt.*(site_tensor.^2),4) - 2*n_av.*C1;
    
    % Third and fourth cumulants
    % Create repititions of the above results with the appropriate shapes for ease of calculations
    n_av_tensor = repmat(n_av,[1, 1, 1, numsites, 1]);
    C1_tensor = repmat(C1,[1, 1, 1, numsites, 1]);
    C2_tensor = repmat(C2,[1 ,1, 1, numsites, 1]);
    
    % Skewness
    C3 = sum(dpdt.*(site_tensor-n_av_tensor).^3, 4) - 3*sum(dists.*C1_tensor.*(site_tensor-n_av_tensor).^2, 4);
    
    % Kurtosis
    C4 = sum(dpdt.*(site_tensor-n_av_tensor).^4, 4) - 4*sum(dists.*C1_tensor.*(site_tensor-n_av_tensor).^3, 4) - 6*sum(dists.*C2_tensor.*(site_tensor-n_av_tensor).^2, 4);

    % Finally, eliminate the fourth index from each of the output arrays,
    % which we have contracted over when we summed over all sites in
    % calculating the cumulants
    C1 = reshape(C1,[length(dga_list), length(p_list), set_size, length(time)]);
    C2 = reshape(C2,[length(dga_list), length(p_list), set_size, length(time)]);
    C3 = reshape(C3,[length(dga_list), length(p_list), set_size, length(time)]);
    C4 = reshape(C4,[length(dga_list), length(p_list), set_size, length(time)]);

end % function


